From 95811120b0441d8c50ee6653642d18a2ab2b9cb9 Mon Sep 17 00:00:00 2001
From: Shravani-std <shravanitingare333@gmail.com>
Date: Sat, 6 Jul 2024 16:45:37 +0530
Subject: [PATCH] updated

---
 .hintrc                |  8 ++++++++
 .vscode/settings.json  |  3 +++
 datafeed/server3.py    |  2 +-
 src/DataManipulator.ts | 35 ++++++++++++++++++++++++-----------
 src/Graph.tsx          | 26 ++++++++++++++++----------
 5 files changed, 52 insertions(+), 22 deletions(-)
 create mode 100644 .hintrc
 create mode 100644 .vscode/settings.json

diff --git a/.hintrc b/.hintrc
new file mode 100644
index 0000000..798957b
--- /dev/null
+++ b/.hintrc
@@ -0,0 +1,8 @@
+{
+  "extends": [
+    "development"
+  ],
+  "hints": {
+    "apple-touch-icons": "off"
+  }
+}
\ No newline at end of file
diff --git a/.vscode/settings.json b/.vscode/settings.json
new file mode 100644
index 0000000..457f44d
--- /dev/null
+++ b/.vscode/settings.json
@@ -0,0 +1,3 @@
+{
+    "python.analysis.typeCheckingMode": "basic"
+}
\ No newline at end of file
diff --git a/datafeed/server3.py b/datafeed/server3.py
index 2de4e28..ca93afd 100644
--- a/datafeed/server3.py
+++ b/datafeed/server3.py
@@ -144,7 +144,7 @@ def order_book(orders, book, stock_name):
 def generate_csv():
     """ Generate a CSV of order history. """
     with open('test.csv', 'wb') as f:
-        writer = csv.writer(f)
+        writer = csv.writer(f) # type: ignore
         for t, stock, side, order, size in orders(market()):
             if t > MARKET_OPEN + SIM_LENGTH:
                 break
diff --git a/src/DataManipulator.ts b/src/DataManipulator.ts
index 7f62295..da005bd 100644
--- a/src/DataManipulator.ts
+++ b/src/DataManipulator.ts
@@ -1,20 +1,33 @@
 import { ServerRespond } from './DataStreamer';
 
 export interface Row {
-  stock: string,
-  top_ask_price: number,
-  timestamp: Date,
+  price_abc: number,
+  price_def: number,
+  ratio: number,
+  timestamp:Date,
+  upper_bound: number,
+  lower_bound:number,
+  trigger_alert:number | undefined,
 }
 
 
 export class DataManipulator {
-  static generateRow(serverResponds: ServerRespond[]) {
-    return serverResponds.map((el: any) => {
-      return {
-        stock: el.stock,
-        top_ask_price: el.top_ask && el.top_ask.price || 0,
-        timestamp: el.timestamp,
-      };
-    })
+  static generateRow(serverRespond: ServerRespond[]): Row {
+    const priceABC = (serverRespond[0].top_ask.price + serverRespond[0].top_bid.price)/2;
+    const priceDEF = (serverRespond[1].top_ask.price + serverRespond[1].top_bid.price)/2;
+    const ratio = priceABC / priceDEF;
+    const upperBound = 1 + 0.05;
+    const lowerBound = 1 - 0.05;
+    return{
+      price_abc: priceABC,
+      price_def: priceDEF,
+      ratio,
+      timestamp: serverRespond[0].timestamp > serverRespond[1].timestamp ?
+        serverRespond[0].timestamp : serverRespond[1].timestamp,
+        upper_bound: upperBound,
+        lower_bound: lowerBound,
+        trigger_alert: (ratio > upperBound || ratio < lowerBound) ? ratio : undefined,
+
+    };
   }
 }
diff --git a/src/Graph.tsx b/src/Graph.tsx
index 277797d..3ea6a1d 100644
--- a/src/Graph.tsx
+++ b/src/Graph.tsx
@@ -23,10 +23,13 @@ class Graph extends Component<IProps, {}> {
     const elem = document.getElementsByTagName('perspective-viewer')[0] as unknown as PerspectiveViewerElement;
 
     const schema = {
-      stock: 'string',
-      top_ask_price: 'float',
-      top_bid_price: 'float',
+      price_abc: 'float',
+      price_def: 'float',
+      ratio:'float',
       timestamp: 'date',
+      upper_bound: 'float',
+      lower_bound: 'float',
+      trigger_alert: 'float',
     };
 
     if (window.perspective && window.perspective.worker()) {
@@ -36,23 +39,26 @@ class Graph extends Component<IProps, {}> {
       // Load the `table` in the `<perspective-viewer>` DOM reference.
       elem.load(this.table);
       elem.setAttribute('view', 'y_line');
-      elem.setAttribute('column-pivots', '["stock"]');
       elem.setAttribute('row-pivots', '["timestamp"]');
-      elem.setAttribute('columns', '["top_ask_price"]');
+      elem.setAttribute('columns', '["ratio","lower_bound","upper_bound","trigger_alert"]');
       elem.setAttribute('aggregates', JSON.stringify({
-        stock: 'distinctcount',
-        top_ask_price: 'avg',
-        top_bid_price: 'avg',
+        price_abc: 'avg',
+        price_def: 'avg',
+        ratio: 'avg',
         timestamp: 'distinct count',
+        upper_bound: 'avg',
+        lower_bound: 'avg',
+        trigger_alert: 'avg',
       }));
     }
   }
 
   componentDidUpdate() {
     if (this.table) {
-      this.table.update(
+      this.table.update([
+
         DataManipulator.generateRow(this.props.data),
-      );
+      ]as unknown as any);
     }
   }
 }
-- 
2.43.0.windows.1

